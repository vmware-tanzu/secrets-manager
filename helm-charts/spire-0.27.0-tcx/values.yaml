# /*
# |    Protect your secrets, protect your sensitive data.
# :    Explore VMware Secrets Manager docs at https://vsecm.com/
# </
# <>/  keep your secrets… secret
# >/
# <>/' Copyright 2023–present VMware Secrets Manager contributors.
# >/'  SPDX-License-Identifier: BSD-2-Clause
# */

# Default values for spire.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  # -- Set it to true for OpenShift deployments. This will add necessary
  # annotations to the SPIRE components to make them work on OpenShift.
  enableOpenShift: false

  # -- Deploy SPIRE components. If set to false, SPIRE components will not be 
  # deployed. This is useful when SPIRE is already deployed in the cluster.
  deploySpire: true

  images:
    # - Container registry details for VSecM Keystone.
    keystone:
      distrolessRepository: vsecm-ist-keystone
      distrolessFipsRepository: vsecm-ist-fips-keystone
      tag: 0.27.0
      pullPolicy: IfNotPresent
    # - Container registry details for VSecM Safe.
    safe:
      distrolessRepository: vsecm-ist-safe
      distrolessFipsRepository: vsecm-ist-fips-safe
      tag: 0.27.0
      pullPolicy: IfNotPresent
    # - Container registry details for VSecM Sentinel.    
    sentinel:
      distrolessRepository: vsecm-ist-sentinel
      distrolessFipsRepository: vsecm-ist-fips-sentinel
      tag: 0.27.0
      pullPolicy: IfNotPresent
    # - Container registry details of VSecM Init Container.
    initContainer:
      repository: vsecm-ist-init-container
      tag: 0.27.0

    # -- Container registry details of SPIRE Agent.
    spireAgent:
      repository: ghcr.io/spiffe/spire-agent
      tag: 1.9.6
      pullPolicy: IfNotPresent
    # -- Container registry details of SPIFFE CSI Driver.
    spiffeCsiDriver:
      repository: ghcr.io/spiffe/spiffe-csi-driver
      tag: 0.2.6
      pullPolicy: IfNotPresent
    # -- Container registry details of SPIFFE CSI Node Driver Registrar.
    nodeDriverRegistrar:
      repository: registry.k8s.io/sig-storage/csi-node-driver-registrar
      tag: v2.10.0
      pullPolicy: IfNotPresent
    # -- Container registry details of SPIRE Server.
    spireServer:
      repository: ghcr.io/spiffe/spire-server
      tag: 1.9.6
      pullPolicy: IfNotPresent
    # -- Container registry details of SPIRE Controller Manager.
    spireControllerManager:
      repository: ghcr.io/spiffe/spire-controller-manager
      tag: 0.5.0
      pullPolicy: IfNotPresent

    spireHelperBash:
      repository: cgr.dev/chainguard/bash
      tag: latest@sha256:8c9e5cbb641ced8112c637eb3611dab29bf65448a9d884a03938baf1b352dc4d
      pullPolicy: IfNotPresent

    spireHelperKubectl:
      repository: docker.io/rancher/kubectl
      tag: v1.28.0
      pullPolicy: IfNotPresent

    openShiftHelperUbi9:
      repository: registry.access.redhat.com/ubi9
      tag: latest
      pullPolicy: IfNotPresent

  # -- SPIRE-related global configuration.
  spire:

    # -- This is the className that ClusterSPIFFEIDs will use to
    # be able to register their SPIFFE IDs with the SPIRE Server.
    controllerManagerClassName: "vsecm"

    # -- Enable federation. If set to true, SPIRE Server will be configured
    # to federate with other SPIRE Servers. This is useful when you have
    # multiple clusters, and you want to establish trust between them.
    federationEnabled: false
    # -- The trust domain is the root of the SPIFFE ID hierarchy. It is used to
    # identify the trust domain of a workload. If you use anything other than
    # the default `vsecm.com`, you must also update the relevant environment
    # variables that does SPIFFE ID validation.
    #
    # To prevent accidental collisions (two trust domains select identical names),
    # operators are advised to select trust domain names which are highly likely
    # to be globally unique. Even though a trust domain name is not a DNS name,
    # using a registered domain name as a suffix of a trust domain name, when
    # available, will reduce chances of an accidental collision; for example,
    # if a trust domain operator owns the domain name `example.com`,
    # then using a trust domain name such as `apps.example.com` would likely
    # not produce a collision. When trust domain names are automatically generated
    # without operator input, randomly generating a unique name (such as a UUID)
    # is strongly advised.
    #
    # All SPIFFE IDs shall be prefixed with `spiffe://<trustDomain>` unless
    # you have an advanced custom setup.
    trustDomain: "vsecm.com"
    # -- The SPIRE CA common name.
    caCommonName: "vsecm.com"
    # -- The SPIRE CA country.
    caCountry: "US"
    # -- The SPIRE CA organization.
    caOrganization: "vsecm.com"
    # -- This is the namespace where the SPIRE components will be deployed.
    namespace: spire-system
    # -- It is best to keep the SPIRE server namespace separate from other
    # SPIRE components for an added layer of security.
    serverNamespace: spire-server
    # -- The SPIRE Server address. This is the address where the SPIRE Server
    # that the agents will connect to.
    # This address is in the form of <service-name>.<namespace>.svc.cluster.local
    # unless you have a custom setup.
    serverAddress: "spire-server.spire-server.svc.cluster.local"
    # -- The log level of the SPIRE components. This is useful for debugging.
    logLevel: DEBUG
    # -- The SPIRE Server port. This is the port where the SPIRE Server will
    # listen for incoming connections.
    # This is the port of the SPIRE server k8s Service.
    serverPort: 443

## @section Chart parameters
##
## @param replicaCount SPIRE server currently runs with a sqlite database. Scaling to multiple instances will not work until we use an external database.
replicaCount: 1

## @param server.kind Define SPIRE server deployment type. 
## Can be statefulset/deployment. Defaults to statefulset if not set. This feature is experimental.
server:
  kind: deployment

imagePullSecrets:
  - name: kubelet-pull-secret
nameOverride: ""
fullnameOverride: ""

experimental:
  eventsBasedCache: false

service:
  # ClusterIP, NodePort, LoadBalancer
  type: ClusterIP
  port: 8081
  annotations: {}

bundleEndpoint:
  # ClusterIP, NodePort, LoadBalancer
  type: ClusterIP
  port: 8443
  annotations: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

#
# Commented out for now, as scaling to multiple instances will not work until
# we use an external database.
# Check out the official documentation for more information:
# https://spiffe.io/docs/latest/setup/
#
# replicaCount: 1
#
# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80
#

# -- SPIRE assigns a default Cluster SPIFFE ID to all workloads in the
# cluster. The SPIFFEID SPIRE assigns by default is not aligned with the
# SPIFFE ID format that VSecM Safe expects. Also, you might not want
# SPIRE to assign SPIFFE IDs to every single workload you have in your
# cluster if you are not using SPIRE to attest those workloads. Therefore,
# this option is set to false by default.
#
# If you set this to true, make sure you update `safeSpiffeIdTemplate`
# `sentinelSpiffeIdTemplate`, `keystoneSpiffeIdTemplate`,
# `workloadNameRegExp`, `workloadSpiffeIdPrefix`, `safeSpiffeIdPrefix`,
# `sentinelSpiffeIdPrefix` and other relevant configurations to match
# with what SPIRE assigns.
enableSpireMintedDefaultClusterSpiffeIds: false

# -- SPIRE Agent settings.
spireAgent:
  # -- The corresponding SPIRE Agent socket directory on the host.
  # SPIRE Agents and SPIFFE CSI Driver shares this directory.
  hostSocketDir: "/run/spire/agent-sockets"
  # -- The SPIRE Agent socket name.
  socketName: "spire-agent.sock"

  # -- The corresponding SPIRE Agent internal socket directory in the
  # container. The configuration should match the SPIRE Agent configuration
  # and SPIRE Agent DaemonSet.
  internalPublicSocketDir: "/tmp/spire-agent/public"

  # -- The corresponding SPIRE Agent internal admin directory in the
  # container. The configuration should match the SPIRE Agent configuration
  # and SPIRE Agent DaemonSet. You are advised not to change this value.
  internalAdminSocketDir: "/tmp/spire-agent/private"

# -- SPIRE Server settings.
spireServer:
  # -- The data directory for the SPIRE Server.
  # SPIRE Server’s ConfigMap and StatefulSet should agree on this directory.
  dataDir: "/run/spire/data"
  # -- The private socket directory for the SPIRE Server.
  # SPIRE Server’s ConfigMap and StatefulSet should agree on this directory.
  privateSocketDir: "/tmp/spire-server/private"

  # -- The configuration directory for the SPIRE Server.
  configDir: "/run/spire/config"

  # -- Service details for the SPIRE Server.
  service:
    # -- Service type.
    # Possible values are: ClusterIP, NodePort, LoadBalancer.
    # Defaults to `ClusterIP`.
    type: ClusterIP

# -- These are the default resources suitable for a moderate SPIRE usage.
# Of course, it's best to do your own benchmarks and update these
# requests and limits to your production needs accordingly.
# That being said, as a rule of thumb, do not limit the CPU request
# on SPIRE Agent and SPIRE server. It's best to let them leverage
# the available excess CPU, if available.
resources:
  # -- SPIRE Server resource requests and limits.
  server:
    requests:
      memory: "1Gi"
      cpu: "100m"
  # -- SPIRE Agent resource requests and limits.
  agent:
    requests:
      memory: "512Mi"
      cpu: "50m"
  # -- SPIFFE CSI Driver resource requests and limits.
  spiffeCsiDriver:
    requests:
      memory: "128Mi"
      cpu: "50m"

# -- Persistence settings for the SPIRE Server.
data:
  # -- Persistence is enabled by default. However, you are recommended to
  # provide your own storage class if you are using a cloud provider or
  # a storage solution that supports dynamic provisioning.
  persistent: false
  # -- Define the PVC if `persistent` is true.
  persistentVolumeClaim:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
