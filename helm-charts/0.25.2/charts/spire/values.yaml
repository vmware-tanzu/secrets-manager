# /*
# |    Protect your secrets, protect your sensitive data.
# :    Explore VMware Secrets Manager docs at https://vsecm.com/
# </
# <>/  keep your secrets... secret
# >/
# <>/' Copyright 2023-present VMware Secrets Manager contributors.
# >/'  SPDX-License-Identifier: BSD-2-Clause
# */

# Default values for spire.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Chart parameters
##
## @param replicaCount SPIRE server currently runs with a sqlite database. Scaling to multiple instances will not work until we use an external database.
replicaCount: 1

# Override it with an image pull secret that you need as follows:
# imagePullSecrets:
#  - name: my-registry-secret
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

experimental:
  eventsBasedCache: false

service:
  # ClusterIP, NodePort, LoadBalancer
  type: ClusterIP
  port: 8081
  annotations: {}

bundleEndpoint:
  # ClusterIP, NodePort, LoadBalancer
  type: ClusterIP
  port: 8443
  annotations: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  # These are the default resources suitable for a moderate SPIRE usage.
  # Of course, it's best to do your own benchmarks and update these
  # requests and limits to your production needs accordingly.
  # That being said, as a rule of thumb, do not limit the CPU request
  # on SPIRE Agent and SPIRE server. It's best to let them leverage
  # the available excess CPU, if available.
  server:
    requests:
      memory: "1Gi"
      cpu: "100m"
  agent:
    requests:
      memory: "512Mi"
      cpu: "50m"
  spiffeCsiDriver:
    requests:
      memory: "128Mi"
      cpu: "50m"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

data:
  persistent: false
  # Define the PVC if `persistent` is true.
  persistentVolumeClaim:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
