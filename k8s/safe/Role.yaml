# /*
# |    Protect your secrets, protect your sensitive data.
# :    Explore VMware Secrets Manager docs at https://vsecm.com/
# </
# <>/  keep your secrets… secret
# >/
# <>/' Copyright 2023–present VMware, Inc.
# >/'  SPDX-License-Identifier: BSD-2-Clause
# */

---

apiVersion: rbac.authorization.k8s.io/v1

##
#
kind: ClusterRole
metadata:
  name: secret-readwriter
#
# Creating a `ClusterRole` will make the role applicable to all namespaces
# within the cluster. This approach is easier to maintain, and still secure
# enough because VMware Secrets Manager Safe will talk only to the Secrets
# it knows about. Alternatively, you can create a `Role` for tighter control:
#
#   kind: Role
#   metadata:
#     name: secret-readwriter
#     namespace: vsecm-system
#
##

##
#
# It is not possible to implement a more granular regex-based
# access control using RBAC. See, for example:
# https://github.com/kubernetes/kubernetes/issues/93845
#
# Also, note that you will either need to specify one role for each
# namespace, or you will need to define a ClusterRole across the cluster.
# The former approach is tedious, yet more explicit, and more secure.
#
# If you are NOT planning to use Kubernetes Secrets to sync VSecM-Safe-generated
# secrets (i.e., if VSECM_SAFE_USE_KUBERNETES_SECRETS is "false"), then
# you can limit the scope of this role as follows:
#
#    rules
#    - apiGroups: [""]
#      resources: ["secrets"]
#      resourceNames: ["vsecm-safe-age-key"]
#      verbs: ["get", "watch", "list", "update"]
#
# When the above rule is defined and when VSECM_SAFE_USE_KUBERNETES_SECRETS
# environment variable is either not set, or set to anything other than "true",
# then you can only consume VSecM-managed secrets through VSecM Safe API, either
# by using the VMware Secrets Manager SDK, or leveraging VMware Secrets Manager
# Sidecar—which is the recommended way.
#
##

##
#
# This `rules` setting is for legacy support (see the above discussion):
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list", "update"]
#
# This `rules` configuration is the recommended, more secure, way:
#
# rules:
#   - apiGroups: [""]
#     resources: ["secrets"]
#     resourceNames: ["vsecm-safe-age-key"]
#     verbs: ["get", "watch", "list", "update"]
#
#
##

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-readwriter-binding
subjects:
  - kind: ServiceAccount
    name: vsecm-safe
    namespace: vsecm-system
roleRef:
  kind: ClusterRole
  name: secret-readwriter
  apiGroup: rbac.authorization.k8s.io

##
#
# Alternatively, for a tighter security, you can define a `RoleBinding`
# instead of a `ClusterRoleBinding`. It will be more secure, yet harder to
# maintain. See the discussion about above `Role`s and `RoleBinding`s.
#
#   apiVersion: rbac.authorization.k8s.io/v1
#   kind: RoleBinding
#   metadata:
#     name: secret-readwriter-binding
#     namespace: vsecm-system
#   subjects:
#     - kind: ServiceAccount
#       name: vsecm-safe
#       namespace: vsecm-system
#   roleRef:
#     kind: Role
#     name: secret-readwriter
#     apiGroup: rbac.authorization.k8s.io
#
##
